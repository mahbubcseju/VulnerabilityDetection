# %%
import os
import json
import pandas as pd

# %%
path = '/work/LAS/weile-lab/mdrahman/SliceLevelVulnerabilityDetection'
data_path = os.path.join(path, 'data/MSR')

# %%
df = pd.read_csv(os.path.join(data_path, 'MSR_data_cleaned.csv'))

# %%
df['idx'] = df['Unnamed: 0']


# %%
def write_jsonl(path, data):
    f = open(path, 'w')
    f.write("\n".join(data))
    f.close()

# %%
def write_function(path, data):
    f = open(path, 'w')
    f.write(data)
    f.close()

# %%
def read_file(path_):
    f = open(path_, 'r')
    data_ = f.read()
    f.close()
    return data_

# %%
import subprocess
def generate_diff(before_program_path, after_program_path, diff_path):
    f=open(diff_path, 'w')
    subprocess.run(['diff', '-u', before_program_path, after_program_path], stdout=f)

# %%
def get_line_number(string_):
    return int(string_.split("@@")[1].split(",")[0].split('-')[-1]) - 1

# %%
def get_changed_lines(file_diff, start_line):
    ptr = 0
    res = {}
    while ptr < len(file_diff) - 1:
        if file_diff[ptr][0] == '-':
            res[start_line] = file_diff[ptr][1:]
        if file_diff[ptr][0] != '+':
            start_line += 1
        ptr += 1
    return res

# %%
def get_func_diff(file_diff, func):
    file_diff = read_file(file_diff)
    file_diff = file_diff.split("\n")
    func = func.split("\n")
    length = len(file_diff)
    func_diffs = {}
    for i in range(length):
        if file_diff[i][:2] == '@@':
            start_line = get_line_number(file_diff[i])
            end_line = length
            for j in range(i + 1, length):
                if file_diff[j][:2] == '@@':
                    end_line = j
                    break
            func_diffs.update(get_changed_lines(file_diff[i + 1: end_line], start_line))
    return func_diffs

# %%
data = []
for item, row in df[df['vul'] == 1].iterrows():
    sample = {}
    sample['idx'] = row['idx']
    sample['target'] = row['vul']
    sample['project'] = row['project']
    sample['func'] = row['func_before']
    sample['func_after'] = row['func_after']
    before_program_path = os.path.join(data_path, 'program_data', str(row['vul']), 'before_version',  str(sample['idx']) + '.c')
    after_program_path = os.path.join(data_path, 'program_data', str(row['vul']), 'after_version', str(sample['idx']) + '.c')
    write_function(before_program_path, sample['func'])
    write_function(after_program_path, sample['func_after'])
    diff_path = os.path.join(data_path, 'diffs',  str(sample['idx']) + '.txt')
    generate_diff(before_program_path, after_program_path, diff_path)
    sample['diff'] = get_func_diff(diff_path, sample['func'])
    lines = sample['func'].split("\n")
    for key, values in sample['diff'].items():
        assert values == lines[key], 'assert failed: _{}_ _{}_ _{}_'.format(sample['idx'], values, lines[key])
    data.append(json.dumps(sample))


# %%
write_jsonl(os.path.join(data_path, 'jsonl', 'vul.jsonl'), data)

# %%
df1 = df[df['vul'] == 0]
from sklearn.utils import shuffle
df1 = shuffle(df1).head(len(data) * 2)

# %%
data_0 = []
for item, row in df1.iterrows():
    sample = {}
    sample['idx'] = row['idx']
    sample['target'] = row['vul']
    sample['project'] = row['project']
    sample['func'] = row['func_before']
    before_program_path = os.path.join(data_path, 'program_data', str(row['vul']), 'before_version',  str(sample['idx']) + '.c')
    write_function(before_program_path, sample['func'])
    data_0.append(json.dumps(sample))

# %%
write_jsonl(os.path.join(data_path, 'jsonl', 'non_vul.jsonl'), data_0)

# %%



